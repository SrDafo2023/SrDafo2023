rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Función auxiliar para verificar el tipo de usuario
    function getUserType() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType;
    }

    // Función auxiliar para verificar si el usuario es destinatario de la notificación
    function isNotificationRecipient() {
      return request.auth != null && (
        resource.data.recipientIds.hasAny([request.auth.uid]) ||
        resource.data.recipientType == 'all' ||
        resource.data.recipientType == getUserType()
      );
    }

    // Reglas para la colección de usuarios
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && 
        (getUserType() == 'admin' || getUserType() == 'petshop');
    }
    
    // Reglas para la colección de pedidos
    match /orders/{orderId} {
      // Permitir crear pedidos a usuarios autenticados
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.customerId;
      
      // Permitir leer pedidos al cliente que los creó
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.customerId;
      
      // Permitir leer todos los pedidos a administradores y petshops
      allow read: if request.auth != null && 
        (getUserType() == 'admin' || getUserType() == 'petshop');
      
      // Permitir actualizar solo el estado del pedido a administradores y petshops
      allow update: if request.auth != null && 
        (getUserType() == 'admin' || getUserType() == 'petshop') &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']);
      
      // Permitir eliminar solo a administradores
      allow delete: if request.auth != null && getUserType() == 'admin';
    }
    
    // Reglas para la colección de productos
    match /products/{productId} {
      allow read: if true; // Productos públicos
      allow write: if request.auth != null && 
        (getUserType() == 'admin' || getUserType() == 'petshop');
    }
    
    // Reglas para otras colecciones del sistema
    match /adoption-forms/{formId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow read: if request.auth != null && 
        (getUserType() == 'admin' || getUserType() == 'adoption-center');
    }
    
    // Reglas para mascotas
    match /pets/{petId} {
      allow read: if true; // Mascotas públicas
      allow write: if request.auth != null && 
        (getUserType() == 'admin' || getUserType() == 'adoption-center');
    }
    
    // Reglas para la colección de notificaciones
    match /notifications/{notificationId} {
      // Permitir leer notificaciones propias o por tipo de usuario
      allow read: if request.auth != null && (
        isNotificationRecipient() ||
        getUserType() == 'admin'
      );
      
      // Permitir crear notificaciones a administradores y petshops
      allow create: if request.auth != null && (
        getUserType() == 'admin' ||
        getUserType() == 'petshop'
      );
      
      // Permitir marcar como leída una notificación
      allow update: if request.auth != null && (
        isNotificationRecipient() ||
        getUserType() == 'admin'
      ) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      // Permitir eliminar notificaciones a administradores
      allow delete: if request.auth != null && getUserType() == 'admin';
    }

    // Reglas para tokens de FCM
    match /fcmTokens/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}